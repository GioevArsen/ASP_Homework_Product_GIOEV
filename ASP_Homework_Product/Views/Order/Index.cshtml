@model OrderAndCart;

@{
    ViewData["Title"] = " - New order";
}


<div class="text-center">
   
    <h1 class="display-4">New order</h1>


    <div class="order-form-container">
        <h1 class="order-form-title">Please fill out the fields below</h1>
        <form action="/Order/Submit" method="post" class="order-form">
            <div asp-validation-summary="None" style="display: none"></div>
            <div class="order-form-group">
                <label asp-for="Order.CustomerName" for="customerName" class="order-form-label">Your Name</label>
                <input asp-for="Order.CustomerName" type="text" id="customerName" class="order-form-input" required>
                <span asp-validation-for="Order.CustomerName" class="login__form-input-warning"></span>
            </div>
            <div class="order-form-group">
                <label asp-for="Order.CustomerLastName" for="customerAddress" class="order-form-label">Your Lastname</label>
                <input asp-for="Order.CustomerLastName" type="text" id="customerAddress" class="order-form-input" required>
                <span asp-validation-for="Order.CustomerLastName" class="login__form-input-warning"></span>
            </div>
            <div class="order-form-group">
                <label asp-for="Order.CustomerPhone" for="customerPhone" class="order-form-label">Your Phone</label>
                <input asp-for="Order.CustomerPhone" type="tel" id="customerPhone" class="order-form-input" required>
                <span asp-validation-for="Order.CustomerPhone" class="login__form-input-warning"></span>
            </div>
            <div class="order-form-group">
                <label asp-for="Order.CustomerEmail" for="customerEmail" class="order-form-label">Your E-mail</label>
                <input asp-for="Order.CustomerEmail" type="email" id="customerEmail" class="order-form-input" required>
                <span asp-validation-for="Order.CustomerEmail" class="login__form-input-warning"></span>
            </div>
            <div class="order-form-group comment">
                <label asp-for="Order.CustomerComment" for="customerComment" class="order-form-label">Comment</label>
                <textarea asp-for="Order.CustomerComment" id="customerComment" class="order-form-input order-form-textarea"></textarea>
                <span asp-validation-for="Order.CustomerComment" class="login__form-input-warning"></span>
            </div>
            <button type="submit" class="order-form-submit">Confirm</button>
        </form>
    </div>

    <div class="order-product-cards-swipe-buttons">
        <div class="carousel-button carousel-button-left">&#10094;</div>
        <div class="carousel-button carousel-button-right">&#10095;</div>
        <div class="order-product-cards-container">
            <div class="order-product-cards">
                @foreach(var product in Model.Cart.ProductsInCart.Distinct().ToList())
                {
                    <div class="order-product-card">
                        <img src=@product.ImagePath alt=@product.ImagePath>
                        <div class="order-product-card-content">
                            <h3 class="order-product-card-title">@product.Name</h3>
                            <p class="order-product-card-price">@Model.Cart.ProductsInCart.Where(prod => prod.Id == product.Id).Select(prod => prod.Cost).Sum() $ - <span>x@($"{Model.Cart.ProductsInCart.Where(prod => prod.Id == product.Id).Count()}")</span></p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>



<script>
    const carouselButtonLeft = document.querySelector('.carousel-button-left');
    const carouselButtonRight = document.querySelector('.carousel-button-right');
    const productCards = document.querySelector('.order-product-cards');
    const productCardsArray = document.querySelectorAll('.order-product-card');
    const container = document.querySelector('.order-product-cards-container');

    const cardWidth = 170;
    const startRightPos = productCardsArray[productCardsArray.length - 1].getBoundingClientRect().right;
    const difference = startRightPos - productCards.offsetWidth;

    let translateValue = 0;

    function updateCarouselButtonsVisibility() {
        if (translateValue === 0) {
            carouselButtonLeft.classList.add('hide');
        } else {
            carouselButtonLeft.classList.remove('hide');
        }

        if (translateValue + difference < cardWidth) {
            carouselButtonRight.classList.add('hide');
        } else {
            carouselButtonRight.classList.remove('hide');
        }
    }

    carouselButtonRight.addEventListener('click', () => {
        if (productCards.scrollWidth - translateValue > container.offsetWidth) {
            translateValue -= cardWidth;
            productCards.style.transform = `translateX(${translateValue}px)`;
            updateCarouselButtonsVisibility();
        }
    });

    carouselButtonLeft.addEventListener('click', () => {
        if (translateValue < 0) {
            translateValue += cardWidth;
            productCards.style.transform = `translateX(${translateValue}px)`;
            updateCarouselButtonsVisibility();
        }
    });

    if ((cardWidth + 20) * productCardsArray.length < container.offsetWidth) {
        productCards.style.justifyContent = 'center';
    }
    else {
        productCards.style.justifyContent = 'start';
    }

    updateCarouselButtonsVisibility();

    window.addEventListener('resize', updateCarouselButtonsVisibility);
</script>